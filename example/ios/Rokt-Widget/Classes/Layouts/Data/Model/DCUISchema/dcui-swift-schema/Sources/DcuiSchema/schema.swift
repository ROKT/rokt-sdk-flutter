/*
 Generated by typeshare 1.7.0
 */

import Foundation

public struct RootSchemaModel<Layout: Codable>: Codable {
	public let breakpoints: [String: Float]
	public let layout: Layout

	public init(breakpoints: [String: Float], layout: Layout) {
		self.breakpoints = breakpoints
		self.layout = layout
	}
}

public enum DimensionWidthValue: Codable, Hashable {
	case fixed(Float)
	case percentage(Float)
	case fit(DimensionWidthFitValue)

	enum CodingKeys: String, CodingKey, Codable {
		case fixed,
			percentage,
			fit
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, value
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .fixed:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .fixed(content)
					return
				}
			case .percentage:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .percentage(content)
					return
				}
			case .fit:
				if let content = try? container.decode(DimensionWidthFitValue.self, forKey: .value) {
					self = .fit(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(DimensionWidthValue.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for DimensionWidthValue"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .fixed(let content):
			try container.encode(CodingKeys.fixed, forKey: .type)
			try container.encode(content, forKey: .value)
		case .percentage(let content):
			try container.encode(CodingKeys.percentage, forKey: .type)
			try container.encode(content, forKey: .value)
		case .fit(let content):
			try container.encode(CodingKeys.fit, forKey: .type)
			try container.encode(content, forKey: .value)
		}
	}
}

public enum DimensionHeightValue: Codable, Hashable {
	case fixed(Float)
	case percentage(Float)
	case fit(DimensionHeightFitValue)

	enum CodingKeys: String, CodingKey, Codable {
		case fixed,
			percentage,
			fit
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, value
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .fixed:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .fixed(content)
					return
				}
			case .percentage:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .percentage(content)
					return
				}
			case .fit:
				if let content = try? container.decode(DimensionHeightFitValue.self, forKey: .value) {
					self = .fit(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(DimensionHeightValue.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for DimensionHeightValue"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .fixed(let content):
			try container.encode(CodingKeys.fixed, forKey: .type)
			try container.encode(content, forKey: .value)
		case .percentage(let content):
			try container.encode(CodingKeys.percentage, forKey: .type)
			try container.encode(content, forKey: .value)
		case .fit(let content):
			try container.encode(CodingKeys.fit, forKey: .type)
			try container.encode(content, forKey: .value)
		}
	}
}

public struct DimensionStylingProperties: Codable, Hashable {
	public let minWidth: Float?
	public let maxWidth: Float?
	public let width: DimensionWidthValue?
	public let minHeight: Float?
	public let maxHeight: Float?
	public let height: DimensionHeightValue?

	public init(minWidth: Float?, maxWidth: Float?, width: DimensionWidthValue?, minHeight: Float?, maxHeight: Float?, height: DimensionHeightValue?) {
		self.minWidth = minWidth
		self.maxWidth = maxWidth
		self.width = width
		self.minHeight = minHeight
		self.maxHeight = maxHeight
		self.height = height
	}
}

public enum FlexChildFlexPosition: String, Codable {
	case center
	case flexStart = "flex-start"
	case flexEnd = "flex-end"
	case stretch
}

public struct FlexChildStylingProperties: Codable, Hashable {
	public let weight: Float?
	public let order: Int32?
	public let alignSelf: FlexChildFlexPosition?

	public init(weight: Float?, order: Int32?, alignSelf: FlexChildFlexPosition?) {
		self.weight = weight
		self.order = order
		self.alignSelf = alignSelf
	}
}

public struct SpacingStylingProperties: Codable, Hashable {
	public let padding: String?
	public let margin: String?
	public let offset: String?

	public init(padding: String?, margin: String?, offset: String?) {
		self.padding = padding
		self.margin = margin
		self.offset = offset
	}
}

public struct ThemeColor: Codable, Hashable {
	public let light: String
	public let dark: String?

	public init(light: String, dark: String?) {
		self.light = light
		self.dark = dark
	}
}

public struct ThemeUrl: Codable, Hashable {
	public let light: String
	public let dark: String?

	public init(light: String, dark: String?) {
		self.light = light
		self.dark = dark
	}
}

public enum BackgroundImagePosition: String, Codable {
	case top
	case right
	case bottom
	case left
	case center
	case topRight = "top-right"
	case topLeft = "top-left"
	case bottomLeft = "bottom-left"
	case bottomRight = "bottom-right"
}

public enum BackgroundImageScale: String, Codable {
	case crop
	case fit
	case fill
}

public struct BackgroundImage: Codable, Hashable {
	public let url: ThemeUrl
	public let position: BackgroundImagePosition?
	public let scale: BackgroundImageScale?

	public init(url: ThemeUrl, position: BackgroundImagePosition?, scale: BackgroundImageScale?) {
		self.url = url
		self.position = position
		self.scale = scale
	}
}

public struct BackgroundStylingProperties: Codable, Hashable {
	public let backgroundColor: ThemeColor?
	public let backgroundImage: BackgroundImage?

	public init(backgroundColor: ThemeColor?, backgroundImage: BackgroundImage?) {
		self.backgroundColor = backgroundColor
		self.backgroundImage = backgroundImage
	}
}

public enum FontWeight: String, Codable {
	case w100 = "100"
	case w200 = "200"
	case w300 = "300"
	case w400 = "400"
	case w500 = "500"
	case w600 = "600"
	case w700 = "700"
	case w800 = "800"
	case w900 = "900"
}

public enum FontJustification: String, Codable {
	case left
	case right
	case center
	case start
	case end
	case justify
}

public enum FontBaselineAlignment: String, Codable {
	case `super`
	case sub
	case baseline
}

public enum FontStyle: String, Codable {
	case normal
	case italic
}

public enum TextTransform: String, Codable {
	case capitalize
	case uppercase
	case lowercase
	case none
}

public enum TextDecoration: String, Codable {
	case underline
	case strikeThrough = "strike-through"
	case none
}

public struct TextStylingProperties: Codable, Hashable {
	public let textColor: ThemeColor?
	public let fontSize: Float?
	public let fontFamily: String?
	public let fontWeight: FontWeight?
	public let lineHeight: Float?
	public let horizontalTextAlign: FontJustification?
	public let baselineTextAlign: FontBaselineAlignment?
	public let fontStyle: FontStyle?
	public let textTransform: TextTransform?
	public let letterSpacing: Float?
	public let textDecoration: TextDecoration?
	public let lineLimit: Int32?

	public init(textColor: ThemeColor?, fontSize: Float?, fontFamily: String?, fontWeight: FontWeight?, lineHeight: Float?, horizontalTextAlign: FontJustification?, baselineTextAlign: FontBaselineAlignment?, fontStyle: FontStyle?, textTransform: TextTransform?, letterSpacing: Float?, textDecoration: TextDecoration?, lineLimit: Int32?) {
		self.textColor = textColor
		self.fontSize = fontSize
		self.fontFamily = fontFamily
		self.fontWeight = fontWeight
		self.lineHeight = lineHeight
		self.horizontalTextAlign = horizontalTextAlign
		self.baselineTextAlign = baselineTextAlign
		self.fontStyle = fontStyle
		self.textTransform = textTransform
		self.letterSpacing = letterSpacing
		self.textDecoration = textDecoration
		self.lineLimit = lineLimit
	}
}

public struct BasicTextStyle: Codable, Hashable {
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?
	public let background: BackgroundStylingProperties?
	public let text: TextStylingProperties?

	public init(dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?, background: BackgroundStylingProperties?, text: TextStylingProperties?) {
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
		self.background = background
		self.text = text
	}
}

public struct BasicStateStylingBlock<T: Codable>: Codable {
	public let `default`: T
	public let pressed: T?
	public let hovered: T?
	public let disabled: T?

	public init(default: T, pressed: T?, hovered: T?, disabled: T?) {
		self.default = `default`
		self.pressed = pressed
		self.hovered = hovered
		self.disabled = disabled
	}
}

public struct BasicTextElements: Codable {
	public let own: [BasicStateStylingBlock<BasicTextStyle>]

	public init(own: [BasicStateStylingBlock<BasicTextStyle>]) {
		self.own = own
	}
}

public struct LayoutStyle<T: Codable>: Codable {
	public let elements: T

	public init(elements: T) {
		self.elements = elements
	}
}

public struct BasicTextModel: Codable {
	public let styles: LayoutStyle<BasicTextElements>?
	public let value: String

	public init(styles: LayoutStyle<BasicTextElements>?, value: String) {
		self.styles = styles
		self.value = value
	}
}

public enum FlexPosition: String, Codable, Hashable {
	case center
	case flexStart = "flex-start"
	case flexEnd = "flex-end"
}

public struct Shadow: Codable, Hashable {
	public let offsetX: Float?
	public let offsetY: Float?
	public let blurRadius: Float?
	public let spreadRadius: Float?
	public let color: ThemeColor

	public init(offsetX: Float?, offsetY: Float?, blurRadius: Float?, spreadRadius: Float?, color: ThemeColor) {
		self.offsetX = offsetX
		self.offsetY = offsetY
		self.blurRadius = blurRadius
		self.spreadRadius = spreadRadius
		self.color = color
	}
}

public enum Overflow: String, Codable, Hashable {
	case auto
	case clip
	case hidden
	case visible
	case scroll
}

public struct ContainerStylingProperties: Codable, Hashable {
	public let justifyContent: FlexPosition?
	public let alignItems: FlexPosition?
	public let shadow: Shadow?
	public let overflow: Overflow?

	public init(justifyContent: FlexPosition?, alignItems: FlexPosition?, shadow: Shadow?, overflow: Overflow?) {
		self.justifyContent = justifyContent
		self.alignItems = alignItems
		self.shadow = shadow
		self.overflow = overflow
	}
}

public enum BorderStyle: String, Codable {
	case solid
	case dashed
}

public struct BorderStylingProperties: Codable, Hashable {
	public let borderRadius: Float?
	public let borderColor: ThemeColor?
	public let borderWidth: Float?
	public let borderStyle: BorderStyle?

	public init(borderRadius: Float?, borderColor: ThemeColor?, borderWidth: Float?, borderStyle: BorderStyle?) {
		self.borderRadius = borderRadius
		self.borderColor = borderColor
		self.borderWidth = borderWidth
		self.borderStyle = borderStyle
	}
}

public struct BottomSheetStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct BottomSheetElements: Codable {
	public let own: [BasicStateStylingBlock<BottomSheetStyles>]

	public init(own: [BasicStateStylingBlock<BottomSheetStyles>]) {
		self.own = own
	}
}

public struct BottomSheetSettings: Codable, Hashable {
	public let allowBackdropToClose: Bool

	public init(allowBackdropToClose: Bool) {
		self.allowBackdropToClose = allowBackdropToClose
	}
}

public struct BottomSheetModel<T: Codable>: Codable {
	public let settings: BottomSheetSettings
	public let styles: LayoutStyle<BottomSheetElements>?
	public let children: [T]

	public init(settings: BottomSheetSettings, styles: LayoutStyle<BottomSheetElements>?, children: [T]) {
		self.settings = settings
		self.styles = styles
		self.children = children
	}
}

public enum PeekThroughSize: Codable, Hashable {
	case fixed(Float)
	case percentage(Float)

	enum CodingKeys: String, CodingKey, Codable {
		case fixed = "Fixed",
			percentage = "Percentage"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, value
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .fixed:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .fixed(content)
					return
				}
			case .percentage:
				if let content = try? container.decode(Float.self, forKey: .value) {
					self = .percentage(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(PeekThroughSize.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for PeekThroughSize"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .fixed(let content):
			try container.encode(CodingKeys.fixed, forKey: .type)
			try container.encode(content, forKey: .value)
		case .percentage(let content):
			try container.encode(CodingKeys.percentage, forKey: .type)
			try container.encode(content, forKey: .value)
		}
	}
}

public struct CarouselSettings: Codable {
	public let viewableItems: [UInt8]
	public let peekThroughSize: [PeekThroughSize]

	public init(viewableItems: [UInt8], peekThroughSize: [PeekThroughSize]) {
		self.viewableItems = viewableItems
		self.peekThroughSize = peekThroughSize
	}
}

public struct CarouselDistributionStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct StatelessStylingBlock<T: Codable>: Codable {
	public let `default`: T

	public init(default: T) {
		self.default = `default`
	}
}

public struct CarouselDistributionElements: Codable {
	public let own: [StatelessStylingBlock<CarouselDistributionStyles>]

	public init(own: [StatelessStylingBlock<CarouselDistributionStyles>]) {
		self.own = own
	}
}

public struct CarouselDistributionModel: Codable {
	public let settings: CarouselSettings
	public let styles: LayoutStyle<CarouselDistributionElements>?

	public init(settings: CarouselSettings, styles: LayoutStyle<CarouselDistributionElements>?) {
		self.settings = settings
		self.styles = styles
	}
}

public struct CloseButtonStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct CloseButtonElements: Codable {
	public let own: [BasicStateStylingBlock<CloseButtonStyles>]

	public init(own: [BasicStateStylingBlock<CloseButtonStyles>]) {
		self.own = own
	}
}

public struct CloseButtonModel<T: Codable>: Codable {
	public let styles: LayoutStyle<CloseButtonElements>?
	public let children: [T]

	public init(styles: LayoutStyle<CloseButtonElements>?, children: [T]) {
		self.styles = styles
		self.children = children
	}
}

public struct ColumnStyle: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct ColumnElements: Codable {
	public let own: [BasicStateStylingBlock<ColumnStyle>]

	public init(own: [BasicStateStylingBlock<ColumnStyle>]) {
		self.own = own
	}
}

public struct ColumnModel<T: Codable>: Codable {
	public let styles: LayoutStyle<ColumnElements>?
	public let children: [T]

	public init(styles: LayoutStyle<ColumnElements>?, children: [T]) {
		self.styles = styles
		self.children = children
	}
}

public struct CreativeResponseStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct CreativeResponseElements: Codable {
	public let own: [BasicStateStylingBlock<CreativeResponseStyles>]

	public init(own: [BasicStateStylingBlock<CreativeResponseStyles>]) {
		self.own = own
	}
}

public enum LinkOpenTarget: String, Codable {
	case internally
	case externally
	case passthrough
}

public struct CreativeResponseModel<T: Codable>: Codable {
	public let responseKey: String
	public let styles: LayoutStyle<CreativeResponseElements>?
	public let openLinks: LinkOpenTarget?
	public let children: [T]

	public init(responseKey: String, styles: LayoutStyle<CreativeResponseElements>?, openLinks: LinkOpenTarget?, children: [T]) {
		self.responseKey = responseKey
		self.styles = styles
		self.openLinks = openLinks
		self.children = children
	}
}

public struct DataImageStyles: Codable, Hashable {
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct DataImageElements: Codable {
	public let own: [BasicStateStylingBlock<DataImageStyles>]

	public init(own: [BasicStateStylingBlock<DataImageStyles>]) {
		self.own = own
	}
}

public struct DataImageModel: Codable {
	public let styles: LayoutStyle<DataImageElements>?
	public let imageKey: String

	public init(styles: LayoutStyle<DataImageElements>?, imageKey: String) {
		self.styles = styles
		self.imageKey = imageKey
	}
}

public struct OneByOneDistributionStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct OneByOneDistributionElements: Codable {
	public let own: [StatelessStylingBlock<OneByOneDistributionStyles>]

	public init(own: [StatelessStylingBlock<OneByOneDistributionStyles>]) {
		self.own = own
	}
}

public struct FadeInOutTransitionSettings: Codable, Hashable {
	public let duration: Int32

	public init(duration: Int32) {
		self.duration = duration
	}
}

public enum Transition: Codable, Hashable {
	case fadeInOut(FadeInOutTransitionSettings)

	enum CodingKeys: String, CodingKey, Codable {
		case fadeInOut = "FadeInOut"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, settings
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .fadeInOut:
				if let content = try? container.decode(FadeInOutTransitionSettings.self, forKey: .settings) {
					self = .fadeInOut(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(Transition.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for Transition"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .fadeInOut(let content):
			try container.encode(CodingKeys.fadeInOut, forKey: .type)
			try container.encode(content, forKey: .settings)
		}
	}
}

public struct OneByOneDistributionModel: Codable {
	public let styles: LayoutStyle<OneByOneDistributionElements>?
	public let transition: Transition

	public init(styles: LayoutStyle<OneByOneDistributionElements>?, transition: Transition) {
		self.styles = styles
		self.transition = transition
	}
}

public struct OverlayStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct OverlayWrapperStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?) {
		self.container = container
		self.background = background
	}
}

public struct OverlayElements: Codable {
	public let own: [BasicStateStylingBlock<OverlayStyles>]
	public let wrapper: [BasicStateStylingBlock<OverlayWrapperStyles>]

	public init(own: [BasicStateStylingBlock<OverlayStyles>], wrapper: [BasicStateStylingBlock<OverlayWrapperStyles>]) {
		self.own = own
		self.wrapper = wrapper
	}
}

public struct OverlaySettings: Codable, Hashable {
	public let allowBackdropToClose: Bool

	public init(allowBackdropToClose: Bool) {
		self.allowBackdropToClose = allowBackdropToClose
	}
}

public struct OverlayModel<T: Codable>: Codable {
	public let settings: OverlaySettings
	public let styles: LayoutStyle<OverlayElements>?
	public let children: [T]

	public init(settings: OverlaySettings, styles: LayoutStyle<OverlayElements>?, children: [T]) {
		self.settings = settings
		self.styles = styles
		self.children = children
	}
}

public struct IndicatorStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?
	public let text: TextStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?, text: TextStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
		self.text = text
	}
}

public struct ProgressIndicatorStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct ProgressIndicatorElements: Codable {
	public let own: [BasicStateStylingBlock<ProgressIndicatorStyles>]
	public let indicator: [BasicStateStylingBlock<IndicatorStyles>]
	public let activeIndicator: [BasicStateStylingBlock<IndicatorStyles>]?
	public let seenIndicator: [BasicStateStylingBlock<IndicatorStyles>]?

	public init(own: [BasicStateStylingBlock<ProgressIndicatorStyles>], indicator: [BasicStateStylingBlock<IndicatorStyles>], activeIndicator: [BasicStateStylingBlock<IndicatorStyles>]?, seenIndicator: [BasicStateStylingBlock<IndicatorStyles>]?) {
		self.own = own
		self.indicator = indicator
		self.activeIndicator = activeIndicator
		self.seenIndicator = seenIndicator
	}
}

public struct ProgressIndicatorSettings: Codable, Hashable {
	public let startPosition: Int32?

	public init(startPosition: Int32?) {
		self.startPosition = startPosition
	}
}

public struct ProgressIndicatorModel: Codable {
	public let styles: LayoutStyle<ProgressIndicatorElements>?
	public let indicator: String
	public let settings: ProgressIndicatorSettings?

	public init(styles: LayoutStyle<ProgressIndicatorElements>?, indicator: String, settings: ProgressIndicatorSettings?) {
		self.styles = styles
		self.indicator = indicator
		self.settings = settings
	}
}

public struct RichTextStyle: Codable, Hashable {
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?
	public let background: BackgroundStylingProperties?
	public let text: TextStylingProperties?

	public init(dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?, background: BackgroundStylingProperties?, text: TextStylingProperties?) {
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
		self.background = background
		self.text = text
	}
}

public struct InlineTextStylingProperties: Codable, Hashable {
	public let textColor: ThemeColor?
	public let fontSize: Float?
	public let fontFamily: String?
	public let fontWeight: FontWeight?
	public let baselineTextAlign: FontBaselineAlignment?
	public let fontStyle: FontStyle?
	public let textTransform: TextTransform?
	public let letterSpacing: Float?
	public let textDecoration: TextDecoration?

	public init(textColor: ThemeColor?, fontSize: Float?, fontFamily: String?, fontWeight: FontWeight?, baselineTextAlign: FontBaselineAlignment?, fontStyle: FontStyle?, textTransform: TextTransform?, letterSpacing: Float?, textDecoration: TextDecoration?) {
		self.textColor = textColor
		self.fontSize = fontSize
		self.fontFamily = fontFamily
		self.fontWeight = fontWeight
		self.baselineTextAlign = baselineTextAlign
		self.fontStyle = fontStyle
		self.textTransform = textTransform
		self.letterSpacing = letterSpacing
		self.textDecoration = textDecoration
	}
}

public struct InLineTextStyle: Codable, Hashable {
	public let text: InlineTextStylingProperties

	public init(text: InlineTextStylingProperties) {
		self.text = text
	}
}

public struct RichTextElements: Codable {
	public let own: [BasicStateStylingBlock<RichTextStyle>]
	public let link: [BasicStateStylingBlock<InLineTextStyle>]?

	public init(own: [BasicStateStylingBlock<RichTextStyle>], link: [BasicStateStylingBlock<InLineTextStyle>]?) {
		self.own = own
		self.link = link
	}
}

public struct RichTextModel: Codable {
	public let styles: LayoutStyle<RichTextElements>?
	public let openLinks: LinkOpenTarget?
	public let value: String

	public init(styles: LayoutStyle<RichTextElements>?, openLinks: LinkOpenTarget?, value: String) {
		self.styles = styles
		self.openLinks = openLinks
		self.value = value
	}
}

public struct RowStyle: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct RowElements: Codable {
	public let own: [BasicStateStylingBlock<RowStyle>]

	public init(own: [BasicStateStylingBlock<RowStyle>]) {
		self.own = own
	}
}

public struct RowModel<T: Codable>: Codable {
	public let styles: LayoutStyle<RowElements>?
	public let children: [T]

	public init(styles: LayoutStyle<RowElements>?, children: [T]) {
		self.styles = styles
		self.children = children
	}
}

public struct StaticImageStyles: Codable, Hashable {
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct StaticImageElements: Codable {
	public let own: [BasicStateStylingBlock<StaticImageStyles>]

	public init(own: [BasicStateStylingBlock<StaticImageStyles>]) {
		self.own = own
	}
}

public struct StaticImageUrl: Codable, Hashable {
	public let light: String
	public let dark: String?

	public init(light: String, dark: String?) {
		self.light = light
		self.dark = dark
	}
}

public struct StaticImageModel: Codable {
	public let styles: LayoutStyle<StaticImageElements>?
	public let alt: String?
	public let title: String?
	public let url: StaticImageUrl

	public init(styles: LayoutStyle<StaticImageElements>?, alt: String?, title: String?, url: StaticImageUrl) {
		self.styles = styles
		self.alt = alt
		self.title = title
		self.url = url
	}
}

public struct StaticLinkStyles: Codable, Hashable {
	public let container: ContainerStylingProperties?
	public let background: BackgroundStylingProperties?
	public let border: BorderStylingProperties?
	public let dimension: DimensionStylingProperties?
	public let flexChild: FlexChildStylingProperties?
	public let spacing: SpacingStylingProperties?

	public init(container: ContainerStylingProperties?, background: BackgroundStylingProperties?, border: BorderStylingProperties?, dimension: DimensionStylingProperties?, flexChild: FlexChildStylingProperties?, spacing: SpacingStylingProperties?) {
		self.container = container
		self.background = background
		self.border = border
		self.dimension = dimension
		self.flexChild = flexChild
		self.spacing = spacing
	}
}

public struct StaticLinkElements: Codable {
	public let own: [BasicStateStylingBlock<StaticLinkStyles>]

	public init(own: [BasicStateStylingBlock<StaticLinkStyles>]) {
		self.own = own
	}
}

public struct StaticLinkModel<T: Codable>: Codable {
	public let src: String
	public let open: LinkOpenTarget
	public let styles: LayoutStyle<StaticLinkElements>?
	public let children: [T]

	public init(src: String, open: LinkOpenTarget, styles: LayoutStyle<StaticLinkElements>?, children: [T]) {
		self.src = src
		self.open = open
		self.styles = styles
		self.children = children
	}
}

public enum OrderableWhenCondition: String, Codable, Hashable {
	case `is`
	case isNot = "is-not"
	case isBelow = "is-below"
	case isAbove = "is-above"
}

public struct BreakpointPredicate: Codable, Hashable {
	public let condition: OrderableWhenCondition
	public let value: String

	public init(condition: OrderableWhenCondition, value: String) {
		self.condition = condition
		self.value = value
	}
}

public struct PositionPredicate: Codable, Hashable {
	public let condition: OrderableWhenCondition
	public let value: String

	public init(condition: OrderableWhenCondition, value: String) {
		self.condition = condition
		self.value = value
	}
}

public struct ProgressionPredicate: Codable, Hashable {
	public let condition: OrderableWhenCondition
	public let value: String

	public init(condition: OrderableWhenCondition, value: String) {
		self.condition = condition
		self.value = value
	}
}

public enum EqualityWhenCondition: String, Codable, Hashable {
	case `is`
	case isNot = "is-not"
}

public struct DarkModePredicate: Codable, Hashable {
	public let condition: EqualityWhenCondition
	public let value: Bool

	public init(condition: EqualityWhenCondition, value: Bool) {
		self.condition = condition
		self.value = value
	}
}

public enum WhenPredicate: Codable, Hashable {
	case breakpoint(BreakpointPredicate)
	case position(PositionPredicate)
	case progression(ProgressionPredicate)
	case darkMode(DarkModePredicate)

	enum CodingKeys: String, CodingKey, Codable {
		case breakpoint = "Breakpoint",
			position = "Position",
			progression = "Progression",
			darkMode = "DarkMode"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, predicate
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .breakpoint:
				if let content = try? container.decode(BreakpointPredicate.self, forKey: .predicate) {
					self = .breakpoint(content)
					return
				}
			case .position:
				if let content = try? container.decode(PositionPredicate.self, forKey: .predicate) {
					self = .position(content)
					return
				}
			case .progression:
				if let content = try? container.decode(ProgressionPredicate.self, forKey: .predicate) {
					self = .progression(content)
					return
				}
			case .darkMode:
				if let content = try? container.decode(DarkModePredicate.self, forKey: .predicate) {
					self = .darkMode(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(WhenPredicate.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for WhenPredicate"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .breakpoint(let content):
			try container.encode(CodingKeys.breakpoint, forKey: .type)
			try container.encode(content, forKey: .predicate)
		case .position(let content):
			try container.encode(CodingKeys.position, forKey: .type)
			try container.encode(content, forKey: .predicate)
		case .progression(let content):
			try container.encode(CodingKeys.progression, forKey: .type)
			try container.encode(content, forKey: .predicate)
		case .darkMode(let content):
			try container.encode(CodingKeys.darkMode, forKey: .type)
			try container.encode(content, forKey: .predicate)
		}
	}
}

public struct WhenModel<T: Codable>: Codable {
	public let predicates: [WhenPredicate]
	public let children: [T]

	public init(predicates: [WhenPredicate], children: [T]) {
		self.predicates = predicates
		self.children = children
	}
}

public indirect enum LayoutSchemaModel: Codable {
	case row(RowModel<LayoutSchemaModel>)
	case column(ColumnModel<LayoutSchemaModel>)
	case staticImage(StaticImageModel)
	case dataImage(DataImageModel)
	case richText(RichTextModel)
	case basicText(BasicTextModel)
	case progressIndicator(ProgressIndicatorModel)
	case creativeResponse(CreativeResponseModel<CreativeResponseChildren>)
	case oneByOneDistribution(OneByOneDistributionModel)
	case overlay(OverlayModel<OverlayChildren>)
	case bottomSheet(BottomSheetModel<BottomSheetChildren>)
	case when(WhenModel<LayoutSchemaModel>)
	case staticLink(StaticLinkModel<StaticLinkChildren>)
	case closeButton(CloseButtonModel<CloseButtonChildren>)
	case carouselDistribution(CarouselDistributionModel)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			staticImage = "StaticImage",
			dataImage = "DataImage",
			richText = "RichText",
			basicText = "BasicText",
			progressIndicator = "ProgressIndicator",
			creativeResponse = "CreativeResponse",
			oneByOneDistribution = "OneByOneDistribution",
			overlay = "Overlay",
			bottomSheet = "BottomSheet",
			when = "When",
			staticLink = "StaticLink",
			closeButton = "CloseButton",
			carouselDistribution = "CarouselDistribution"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<LayoutSchemaModel>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<LayoutSchemaModel>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			case .dataImage:
				if let content = try? container.decode(DataImageModel.self, forKey: .node) {
					self = .dataImage(content)
					return
				}
			case .richText:
				if let content = try? container.decode(RichTextModel.self, forKey: .node) {
					self = .richText(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			case .progressIndicator:
				if let content = try? container.decode(ProgressIndicatorModel.self, forKey: .node) {
					self = .progressIndicator(content)
					return
				}
			case .creativeResponse:
				if let content = try? container.decode(CreativeResponseModel<CreativeResponseChildren>.self, forKey: .node) {
					self = .creativeResponse(content)
					return
				}
			case .oneByOneDistribution:
				if let content = try? container.decode(OneByOneDistributionModel.self, forKey: .node) {
					self = .oneByOneDistribution(content)
					return
				}
			case .overlay:
				if let content = try? container.decode(OverlayModel<OverlayChildren>.self, forKey: .node) {
					self = .overlay(content)
					return
				}
			case .bottomSheet:
				if let content = try? container.decode(BottomSheetModel<BottomSheetChildren>.self, forKey: .node) {
					self = .bottomSheet(content)
					return
				}
			case .when:
				if let content = try? container.decode(WhenModel<LayoutSchemaModel>.self, forKey: .node) {
					self = .when(content)
					return
				}
			case .staticLink:
				if let content = try? container.decode(StaticLinkModel<StaticLinkChildren>.self, forKey: .node) {
					self = .staticLink(content)
					return
				}
			case .closeButton:
				if let content = try? container.decode(CloseButtonModel<CloseButtonChildren>.self, forKey: .node) {
					self = .closeButton(content)
					return
				}
			case .carouselDistribution:
				if let content = try? container.decode(CarouselDistributionModel.self, forKey: .node) {
					self = .carouselDistribution(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(LayoutSchemaModel.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for LayoutSchemaModel"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .dataImage(let content):
			try container.encode(CodingKeys.dataImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .richText(let content):
			try container.encode(CodingKeys.richText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .progressIndicator(let content):
			try container.encode(CodingKeys.progressIndicator, forKey: .type)
			try container.encode(content, forKey: .node)
		case .creativeResponse(let content):
			try container.encode(CodingKeys.creativeResponse, forKey: .type)
			try container.encode(content, forKey: .node)
		case .oneByOneDistribution(let content):
			try container.encode(CodingKeys.oneByOneDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		case .overlay(let content):
			try container.encode(CodingKeys.overlay, forKey: .type)
			try container.encode(content, forKey: .node)
		case .bottomSheet(let content):
			try container.encode(CodingKeys.bottomSheet, forKey: .type)
			try container.encode(content, forKey: .node)
		case .when(let content):
			try container.encode(CodingKeys.when, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticLink(let content):
			try container.encode(CodingKeys.staticLink, forKey: .type)
			try container.encode(content, forKey: .node)
		case .closeButton(let content):
			try container.encode(CodingKeys.closeButton, forKey: .type)
			try container.encode(content, forKey: .node)
		case .carouselDistribution(let content):
			try container.encode(CodingKeys.carouselDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public enum LayoutVariantSchemaModel: Codable {
	case row(RowModel<LayoutVariantChildren>)
	case column(ColumnModel<LayoutVariantChildren>)
	case staticImage(StaticImageModel)
	case dataImage(DataImageModel)
	case richText(RichTextModel)
	case basicText(BasicTextModel)
	case creativeResponse(CreativeResponseModel<CreativeResponseChildren>)
	case when(WhenModel<LayoutVariantChildren>)
	case staticLink(StaticLinkModel<StaticLinkChildren>)
	case closeButton(CloseButtonModel<CloseButtonChildren>)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			staticImage = "StaticImage",
			dataImage = "DataImage",
			richText = "RichText",
			basicText = "BasicText",
			creativeResponse = "CreativeResponse",
			when = "When",
			staticLink = "StaticLink",
			closeButton = "CloseButton"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<LayoutVariantChildren>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<LayoutVariantChildren>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			case .dataImage:
				if let content = try? container.decode(DataImageModel.self, forKey: .node) {
					self = .dataImage(content)
					return
				}
			case .richText:
				if let content = try? container.decode(RichTextModel.self, forKey: .node) {
					self = .richText(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			case .creativeResponse:
				if let content = try? container.decode(CreativeResponseModel<CreativeResponseChildren>.self, forKey: .node) {
					self = .creativeResponse(content)
					return
				}
			case .when:
				if let content = try? container.decode(WhenModel<LayoutVariantChildren>.self, forKey: .node) {
					self = .when(content)
					return
				}
			case .staticLink:
				if let content = try? container.decode(StaticLinkModel<StaticLinkChildren>.self, forKey: .node) {
					self = .staticLink(content)
					return
				}
			case .closeButton:
				if let content = try? container.decode(CloseButtonModel<CloseButtonChildren>.self, forKey: .node) {
					self = .closeButton(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(LayoutVariantSchemaModel.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for LayoutVariantSchemaModel"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .dataImage(let content):
			try container.encode(CodingKeys.dataImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .richText(let content):
			try container.encode(CodingKeys.richText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .creativeResponse(let content):
			try container.encode(CodingKeys.creativeResponse, forKey: .type)
			try container.encode(content, forKey: .node)
		case .when(let content):
			try container.encode(CodingKeys.when, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticLink(let content):
			try container.encode(CodingKeys.staticLink, forKey: .type)
			try container.encode(content, forKey: .node)
		case .closeButton(let content):
			try container.encode(CodingKeys.closeButton, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public indirect enum LayoutVariantChildren: Codable {
	case row(RowModel<LayoutVariantChildren>)
	case column(ColumnModel<LayoutVariantChildren>)
	case staticImage(StaticImageModel)
	case dataImage(DataImageModel)
	case richText(RichTextModel)
	case basicText(BasicTextModel)
	case creativeResponse(CreativeResponseModel<CreativeResponseChildren>)
	case when(WhenModel<LayoutVariantChildren>)
	case staticLink(StaticLinkModel<StaticLinkChildren>)
	case closeButton(CloseButtonModel<CloseButtonChildren>)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			staticImage = "StaticImage",
			dataImage = "DataImage",
			richText = "RichText",
			basicText = "BasicText",
			creativeResponse = "CreativeResponse",
			when = "When",
			staticLink = "StaticLink",
			closeButton = "CloseButton"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<LayoutVariantChildren>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<LayoutVariantChildren>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			case .dataImage:
				if let content = try? container.decode(DataImageModel.self, forKey: .node) {
					self = .dataImage(content)
					return
				}
			case .richText:
				if let content = try? container.decode(RichTextModel.self, forKey: .node) {
					self = .richText(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			case .creativeResponse:
				if let content = try? container.decode(CreativeResponseModel<CreativeResponseChildren>.self, forKey: .node) {
					self = .creativeResponse(content)
					return
				}
			case .when:
				if let content = try? container.decode(WhenModel<LayoutVariantChildren>.self, forKey: .node) {
					self = .when(content)
					return
				}
			case .staticLink:
				if let content = try? container.decode(StaticLinkModel<StaticLinkChildren>.self, forKey: .node) {
					self = .staticLink(content)
					return
				}
			case .closeButton:
				if let content = try? container.decode(CloseButtonModel<CloseButtonChildren>.self, forKey: .node) {
					self = .closeButton(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(LayoutVariantChildren.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for LayoutVariantChildren"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .dataImage(let content):
			try container.encode(CodingKeys.dataImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .richText(let content):
			try container.encode(CodingKeys.richText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .creativeResponse(let content):
			try container.encode(CodingKeys.creativeResponse, forKey: .type)
			try container.encode(content, forKey: .node)
		case .when(let content):
			try container.encode(CodingKeys.when, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticLink(let content):
			try container.encode(CodingKeys.staticLink, forKey: .type)
			try container.encode(content, forKey: .node)
		case .closeButton(let content):
			try container.encode(CodingKeys.closeButton, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public enum OuterLayoutSchemaModel: Codable {
	case row(RowModel<OuterLayoutChildren>)
	case column(ColumnModel<OuterLayoutChildren>)
	case staticImage(StaticImageModel)
	case richText(RichTextModel)
	case basicText(BasicTextModel)
	case progressIndicator(ProgressIndicatorModel)
	case oneByOneDistribution(OneByOneDistributionModel)
	case overlay(OverlayModel<OverlayChildren>)
	case bottomSheet(BottomSheetModel<BottomSheetChildren>)
	case when(WhenModel<OuterLayoutChildren>)
	case staticLink(StaticLinkModel<StaticLinkChildren>)
	case closeButton(CloseButtonModel<CloseButtonChildren>)
	case carouselDistribution(CarouselDistributionModel)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			staticImage = "StaticImage",
			richText = "RichText",
			basicText = "BasicText",
			progressIndicator = "ProgressIndicator",
			oneByOneDistribution = "OneByOneDistribution",
			overlay = "Overlay",
			bottomSheet = "BottomSheet",
			when = "When",
			staticLink = "StaticLink",
			closeButton = "CloseButton",
			carouselDistribution = "CarouselDistribution"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<OuterLayoutChildren>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<OuterLayoutChildren>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			case .richText:
				if let content = try? container.decode(RichTextModel.self, forKey: .node) {
					self = .richText(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			case .progressIndicator:
				if let content = try? container.decode(ProgressIndicatorModel.self, forKey: .node) {
					self = .progressIndicator(content)
					return
				}
			case .oneByOneDistribution:
				if let content = try? container.decode(OneByOneDistributionModel.self, forKey: .node) {
					self = .oneByOneDistribution(content)
					return
				}
			case .overlay:
				if let content = try? container.decode(OverlayModel<OverlayChildren>.self, forKey: .node) {
					self = .overlay(content)
					return
				}
			case .bottomSheet:
				if let content = try? container.decode(BottomSheetModel<BottomSheetChildren>.self, forKey: .node) {
					self = .bottomSheet(content)
					return
				}
			case .when:
				if let content = try? container.decode(WhenModel<OuterLayoutChildren>.self, forKey: .node) {
					self = .when(content)
					return
				}
			case .staticLink:
				if let content = try? container.decode(StaticLinkModel<StaticLinkChildren>.self, forKey: .node) {
					self = .staticLink(content)
					return
				}
			case .closeButton:
				if let content = try? container.decode(CloseButtonModel<CloseButtonChildren>.self, forKey: .node) {
					self = .closeButton(content)
					return
				}
			case .carouselDistribution:
				if let content = try? container.decode(CarouselDistributionModel.self, forKey: .node) {
					self = .carouselDistribution(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(OuterLayoutSchemaModel.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for OuterLayoutSchemaModel"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .richText(let content):
			try container.encode(CodingKeys.richText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .progressIndicator(let content):
			try container.encode(CodingKeys.progressIndicator, forKey: .type)
			try container.encode(content, forKey: .node)
		case .oneByOneDistribution(let content):
			try container.encode(CodingKeys.oneByOneDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		case .overlay(let content):
			try container.encode(CodingKeys.overlay, forKey: .type)
			try container.encode(content, forKey: .node)
		case .bottomSheet(let content):
			try container.encode(CodingKeys.bottomSheet, forKey: .type)
			try container.encode(content, forKey: .node)
		case .when(let content):
			try container.encode(CodingKeys.when, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticLink(let content):
			try container.encode(CodingKeys.staticLink, forKey: .type)
			try container.encode(content, forKey: .node)
		case .closeButton(let content):
			try container.encode(CodingKeys.closeButton, forKey: .type)
			try container.encode(content, forKey: .node)
		case .carouselDistribution(let content):
			try container.encode(CodingKeys.carouselDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public indirect enum OuterLayoutChildren: Codable {
	case row(RowModel<OuterLayoutChildren>)
	case column(ColumnModel<OuterLayoutChildren>)
	case staticImage(StaticImageModel)
	case richText(RichTextModel)
	case basicText(BasicTextModel)
	case progressIndicator(ProgressIndicatorModel)
	case oneByOneDistribution(OneByOneDistributionModel)
	case when(WhenModel<OuterLayoutChildren>)
	case staticLink(StaticLinkModel<StaticLinkChildren>)
	case closeButton(CloseButtonModel<CloseButtonChildren>)
	case carouselDistribution(CarouselDistributionModel)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			staticImage = "StaticImage",
			richText = "RichText",
			basicText = "BasicText",
			progressIndicator = "ProgressIndicator",
			oneByOneDistribution = "OneByOneDistribution",
			when = "When",
			staticLink = "StaticLink",
			closeButton = "CloseButton",
			carouselDistribution = "CarouselDistribution"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<OuterLayoutChildren>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<OuterLayoutChildren>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			case .richText:
				if let content = try? container.decode(RichTextModel.self, forKey: .node) {
					self = .richText(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			case .progressIndicator:
				if let content = try? container.decode(ProgressIndicatorModel.self, forKey: .node) {
					self = .progressIndicator(content)
					return
				}
			case .oneByOneDistribution:
				if let content = try? container.decode(OneByOneDistributionModel.self, forKey: .node) {
					self = .oneByOneDistribution(content)
					return
				}
			case .when:
				if let content = try? container.decode(WhenModel<OuterLayoutChildren>.self, forKey: .node) {
					self = .when(content)
					return
				}
			case .staticLink:
				if let content = try? container.decode(StaticLinkModel<StaticLinkChildren>.self, forKey: .node) {
					self = .staticLink(content)
					return
				}
			case .closeButton:
				if let content = try? container.decode(CloseButtonModel<CloseButtonChildren>.self, forKey: .node) {
					self = .closeButton(content)
					return
				}
			case .carouselDistribution:
				if let content = try? container.decode(CarouselDistributionModel.self, forKey: .node) {
					self = .carouselDistribution(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(OuterLayoutChildren.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for OuterLayoutChildren"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .richText(let content):
			try container.encode(CodingKeys.richText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .progressIndicator(let content):
			try container.encode(CodingKeys.progressIndicator, forKey: .type)
			try container.encode(content, forKey: .node)
		case .oneByOneDistribution(let content):
			try container.encode(CodingKeys.oneByOneDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		case .when(let content):
			try container.encode(CodingKeys.when, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticLink(let content):
			try container.encode(CodingKeys.staticLink, forKey: .type)
			try container.encode(content, forKey: .node)
		case .closeButton(let content):
			try container.encode(CodingKeys.closeButton, forKey: .type)
			try container.encode(content, forKey: .node)
		case .carouselDistribution(let content):
			try container.encode(CodingKeys.carouselDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public indirect enum CreativeResponseChildren: Codable {
	case row(RowModel<CreativeResponseChildren>)
	case column(ColumnModel<CreativeResponseChildren>)
	case basicText(BasicTextModel)
	case staticImage(StaticImageModel)
	case dataImage(DataImageModel)
	case when(WhenModel<CreativeResponseChildren>)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			basicText = "BasicText",
			staticImage = "StaticImage",
			dataImage = "DataImage",
			when = "When"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<CreativeResponseChildren>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<CreativeResponseChildren>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			case .dataImage:
				if let content = try? container.decode(DataImageModel.self, forKey: .node) {
					self = .dataImage(content)
					return
				}
			case .when:
				if let content = try? container.decode(WhenModel<CreativeResponseChildren>.self, forKey: .node) {
					self = .when(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(CreativeResponseChildren.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for CreativeResponseChildren"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .dataImage(let content):
			try container.encode(CodingKeys.dataImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .when(let content):
			try container.encode(CodingKeys.when, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public indirect enum OverlayChildren: Codable {
	case row(RowModel<OverlayChildren>)
	case column(ColumnModel<OverlayChildren>)
	case staticImage(StaticImageModel)
	case richText(RichTextModel)
	case basicText(BasicTextModel)
	case progressIndicator(ProgressIndicatorModel)
	case oneByOneDistribution(OneByOneDistributionModel)
	case when(WhenModel<OverlayChildren>)
	case staticLink(StaticLinkModel<StaticLinkChildren>)
	case closeButton(CloseButtonModel<CloseButtonChildren>)
	case carouselDistribution(CarouselDistributionModel)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			staticImage = "StaticImage",
			richText = "RichText",
			basicText = "BasicText",
			progressIndicator = "ProgressIndicator",
			oneByOneDistribution = "OneByOneDistribution",
			when = "When",
			staticLink = "StaticLink",
			closeButton = "CloseButton",
			carouselDistribution = "CarouselDistribution"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<OverlayChildren>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<OverlayChildren>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			case .richText:
				if let content = try? container.decode(RichTextModel.self, forKey: .node) {
					self = .richText(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			case .progressIndicator:
				if let content = try? container.decode(ProgressIndicatorModel.self, forKey: .node) {
					self = .progressIndicator(content)
					return
				}
			case .oneByOneDistribution:
				if let content = try? container.decode(OneByOneDistributionModel.self, forKey: .node) {
					self = .oneByOneDistribution(content)
					return
				}
			case .when:
				if let content = try? container.decode(WhenModel<OverlayChildren>.self, forKey: .node) {
					self = .when(content)
					return
				}
			case .staticLink:
				if let content = try? container.decode(StaticLinkModel<StaticLinkChildren>.self, forKey: .node) {
					self = .staticLink(content)
					return
				}
			case .closeButton:
				if let content = try? container.decode(CloseButtonModel<CloseButtonChildren>.self, forKey: .node) {
					self = .closeButton(content)
					return
				}
			case .carouselDistribution:
				if let content = try? container.decode(CarouselDistributionModel.self, forKey: .node) {
					self = .carouselDistribution(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(OverlayChildren.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for OverlayChildren"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .richText(let content):
			try container.encode(CodingKeys.richText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .progressIndicator(let content):
			try container.encode(CodingKeys.progressIndicator, forKey: .type)
			try container.encode(content, forKey: .node)
		case .oneByOneDistribution(let content):
			try container.encode(CodingKeys.oneByOneDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		case .when(let content):
			try container.encode(CodingKeys.when, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticLink(let content):
			try container.encode(CodingKeys.staticLink, forKey: .type)
			try container.encode(content, forKey: .node)
		case .closeButton(let content):
			try container.encode(CodingKeys.closeButton, forKey: .type)
			try container.encode(content, forKey: .node)
		case .carouselDistribution(let content):
			try container.encode(CodingKeys.carouselDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public indirect enum BottomSheetChildren: Codable {
	case row(RowModel<BottomSheetChildren>)
	case column(ColumnModel<BottomSheetChildren>)
	case staticImage(StaticImageModel)
	case richText(RichTextModel)
	case basicText(BasicTextModel)
	case progressIndicator(ProgressIndicatorModel)
	case oneByOneDistribution(OneByOneDistributionModel)
	case when(WhenModel<BottomSheetChildren>)
	case staticLink(StaticLinkModel<StaticLinkChildren>)
	case closeButton(CloseButtonModel<CloseButtonChildren>)
	case carouselDistribution(CarouselDistributionModel)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			staticImage = "StaticImage",
			richText = "RichText",
			basicText = "BasicText",
			progressIndicator = "ProgressIndicator",
			oneByOneDistribution = "OneByOneDistribution",
			when = "When",
			staticLink = "StaticLink",
			closeButton = "CloseButton",
			carouselDistribution = "CarouselDistribution"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<BottomSheetChildren>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<BottomSheetChildren>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			case .richText:
				if let content = try? container.decode(RichTextModel.self, forKey: .node) {
					self = .richText(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			case .progressIndicator:
				if let content = try? container.decode(ProgressIndicatorModel.self, forKey: .node) {
					self = .progressIndicator(content)
					return
				}
			case .oneByOneDistribution:
				if let content = try? container.decode(OneByOneDistributionModel.self, forKey: .node) {
					self = .oneByOneDistribution(content)
					return
				}
			case .when:
				if let content = try? container.decode(WhenModel<BottomSheetChildren>.self, forKey: .node) {
					self = .when(content)
					return
				}
			case .staticLink:
				if let content = try? container.decode(StaticLinkModel<StaticLinkChildren>.self, forKey: .node) {
					self = .staticLink(content)
					return
				}
			case .closeButton:
				if let content = try? container.decode(CloseButtonModel<CloseButtonChildren>.self, forKey: .node) {
					self = .closeButton(content)
					return
				}
			case .carouselDistribution:
				if let content = try? container.decode(CarouselDistributionModel.self, forKey: .node) {
					self = .carouselDistribution(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(BottomSheetChildren.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for BottomSheetChildren"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .richText(let content):
			try container.encode(CodingKeys.richText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .progressIndicator(let content):
			try container.encode(CodingKeys.progressIndicator, forKey: .type)
			try container.encode(content, forKey: .node)
		case .oneByOneDistribution(let content):
			try container.encode(CodingKeys.oneByOneDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		case .when(let content):
			try container.encode(CodingKeys.when, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticLink(let content):
			try container.encode(CodingKeys.staticLink, forKey: .type)
			try container.encode(content, forKey: .node)
		case .closeButton(let content):
			try container.encode(CodingKeys.closeButton, forKey: .type)
			try container.encode(content, forKey: .node)
		case .carouselDistribution(let content):
			try container.encode(CodingKeys.carouselDistribution, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public indirect enum StaticLinkChildren: Codable {
	case row(RowModel<StaticLinkChildren>)
	case column(ColumnModel<StaticLinkChildren>)
	case basicText(BasicTextModel)
	case staticImage(StaticImageModel)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			basicText = "BasicText",
			staticImage = "StaticImage"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<StaticLinkChildren>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<StaticLinkChildren>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(StaticLinkChildren.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for StaticLinkChildren"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public indirect enum CloseButtonChildren: Codable {
	case row(RowModel<CloseButtonChildren>)
	case column(ColumnModel<CloseButtonChildren>)
	case staticImage(StaticImageModel)
	case basicText(BasicTextModel)

	enum CodingKeys: String, CodingKey, Codable {
		case row = "Row",
			column = "Column",
			staticImage = "StaticImage",
			basicText = "BasicText"
	}

	private enum ContainerCodingKeys: String, CodingKey {
		case type, node
	}

	public init(from decoder: Decoder) throws {
		let container = try decoder.container(keyedBy: ContainerCodingKeys.self)
		if let type = try? container.decode(CodingKeys.self, forKey: .type) {
			switch type {
			case .row:
				if let content = try? container.decode(RowModel<CloseButtonChildren>.self, forKey: .node) {
					self = .row(content)
					return
				}
			case .column:
				if let content = try? container.decode(ColumnModel<CloseButtonChildren>.self, forKey: .node) {
					self = .column(content)
					return
				}
			case .staticImage:
				if let content = try? container.decode(StaticImageModel.self, forKey: .node) {
					self = .staticImage(content)
					return
				}
			case .basicText:
				if let content = try? container.decode(BasicTextModel.self, forKey: .node) {
					self = .basicText(content)
					return
				}
			}
		}
		throw DecodingError.typeMismatch(CloseButtonChildren.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for CloseButtonChildren"))
	}

	public func encode(to encoder: Encoder) throws {
		var container = encoder.container(keyedBy: ContainerCodingKeys.self)
		switch self {
		case .row(let content):
			try container.encode(CodingKeys.row, forKey: .type)
			try container.encode(content, forKey: .node)
		case .column(let content):
			try container.encode(CodingKeys.column, forKey: .type)
			try container.encode(content, forKey: .node)
		case .staticImage(let content):
			try container.encode(CodingKeys.staticImage, forKey: .type)
			try container.encode(content, forKey: .node)
		case .basicText(let content):
			try container.encode(CodingKeys.basicText, forKey: .type)
			try container.encode(content, forKey: .node)
		}
	}
}

public enum WhenTarget: String, Codable, Hashable {
	case breakpoint
	case progression
	case position
	case darkMode = "dark-mode"
}

public enum DimensionWidthFitValue: String, Codable {
	case wrapContent = "wrap-content"
	case fitWidth = "fit-width"
}

public enum DimensionHeightFitValue: String, Codable {
	case wrapContent = "wrap-content"
	case fitHeight = "fit-height"
}
