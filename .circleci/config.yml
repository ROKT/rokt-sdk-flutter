version: 2.1
orbs:
  flutter: circleci/flutter@1.1.0
  android: circleci/android@2.1.2
  macos: circleci/macos@2.1.0
jobs:
  build_test_iOS:
    working_directory: ~/project/example
    macos:
      xcode: 13.3.1
    steps:
      - checkout:
          path: ~/project
      - flutter/install_sdk_and_pub:
          flutter_version: 2.10.5
      - flutter/install_ios_pod
      - run:
          name: Run tests
          command: flutter test
      - macos/preboot-simulator:
          device: iPhone 13
          version: "15.4"
      - run:
          name: Run Integration Test
          command: flutter test integration_test/app_test.dart

  # build_test_Android:
  #   working_directory: ~/project/example/android
  #   macos:
  #     xcode: 13.3.1
  #   environment:
  #     JVM_OPTS: -Xmx3200m
  #   steps:
  #     - checkout:
  #         path: ~/project
  #     - run:
  #         name: Install JAVA
  #         command: |
  #           HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask homebrew/cask-versions/adoptopenjdk8
  #     - run:
  #         name: Install Android sdk
  #         command: |
  #           HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask android-sdk
      - run:
          name: Setup environment variables
          command: |
            echo 'export PATH="$PATH:/usr/local/opt/node@8/bin:${HOME}/.yarn/bin:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin:/usr/local/share/android-sdk/tools/bin"' >> $BASH_ENV
            echo 'export JAVA_HOME=`/usr/libexec/java_home -v 1.8`' >> $BASH_ENV
            echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export ANDROID_SDK_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export QEMU_AUDIO_DRV=none' >> $BASH_ENV
            echo 'export PATH="$PATH:~/flutter/bin"'  >> $BASH_ENV
  #     - run:
  #         name: Install emulator dependencies
  #         command: (yes | sdkmanager "platform-tools" "platforms;android-26" "extras;intel;Hardware_Accelerated_Execution_Manager" "build-tools;26.0.0" "system-images;android-26;google_apis;x86" "emulator" --verbose) || true
  #     - run:
  #         name: chmod permissions
  #         command: chmod +x ./gradlew
  #     - run: avdmanager create avd -n Pixel_2_API_26 -k "system-images;android-26;google_apis;x86" -g google_apis -d "Nexus 5"
  #     - run:
  #         name: Run emulator in background
  #         command: /usr/local/share/android-sdk/tools/emulator @Pixel_2_API_26 -noaudio -no-boot-anim -no-window
  #         background: true
  #     - run:
  #         name: download flutter SDK
  #         command: if ! test -f "~/flutter_sdk.zip"; then curl -o ~/flutter_sdk.zip https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos_2.10.5-stable.zip; fi
  #     - run:
  #         name: unzip flutter SDK
  #         command: unzip ~/flutter_sdk.zip -d ~
  #     - run: flutter doctor
  #     - run:
  #         name: Flutter build
  #         command: cd ..; flutter build apk
  #     - run:
  #         name: Flutter test
  #         command: cd ..; flutter test integration_test/app_test.dart
  #     - run:
  #         name: Download Android Dependencies
  #         command: ./gradlew androidDependencies
  #     - run:
  #         name: Run Unit Tests
  #         command: ./gradlew test

  build_test_Android:
    working_directory: ~/project/example/android
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1
    steps:
      - checkout:
          path: ~/project
      # - run:
      #     name: Install JAVA
      #     command: |
      #       HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask homebrew/cask-versions/adoptopenjdk8
      # - run:
      #     name: Install Android sdk
      #     command: |
      #       HOMEBREW_NO_AUTO_UPDATE=1 brew install --cask android-sdk
      - run:
          name: Setup environment variables
          command: |
            echo 'export PATH="$PATH:/usr/local/opt/node@8/bin:${HOME}/.yarn/bin:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin:/usr/local/share/android-sdk/tools/bin"' >> $BASH_ENV
            echo 'export JAVA_HOME=`/usr/libexec/java_home -v 1.8`' >> $BASH_ENV
            echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export ANDROID_SDK_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"' >> $BASH_ENV
            echo 'export QEMU_AUDIO_DRV=none' >> $BASH_ENV
            echo 'export PATH="$PATH:~/flutter/bin"'  >> $BASH_ENV
      # - run:
      #     name: Install emulator dependencies
      #     command: (yes | sdkmanager "platform-tools" "platforms;android-26" "extras;intel;Hardware_Accelerated_Execution_Manager" "build-tools;26.0.0" "system-images;android-26;google_apis;x86" "emulator" --verbose) || true
      # - run:
      #     name: chmod permissions
      #     command: chmod +x ./gradlew
      # - run: avdmanager create avd -n Pixel_2_API_26 -k "system-images;android-26;google_apis;x86" -g google_apis -d "Nexus 5"
      # - run:
      #     name: Run emulator in background
      #     command: /usr/local/share/android-sdk/tools/emulator @Pixel_2_API_26 -noaudio -no-boot-anim -no-window
      #     background: true
      - android/create-avd:
          avd-name: myavd
          install: true
          system-image: system-images;android-29;default;x86
      # - android/restore-build-cache
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: download flutter SDK
          command: if ! test -f "~/flutter_sdk.zip"; then curl -o ~/flutter_sdk.zip https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos_2.10.5-stable.zip; fi
      - run:
          name: unzip flutter SDK
          command: unzip ~/flutter_sdk.zip -d ~
      - run: flutter doctor
      - run:
          name: Flutter build
          command: cd ..; flutter build apk
      - android/start-emulator:
          avd-name: myavd
          no-window: true
          # restore-gradle-cache-prefix: v1a
          post-emulator-launch-assemble-command: ./gradlew androidDependencies
      - run:
          name: Flutter test
          command: cd ..; flutter test integration_test/app_test.dart
      # - run:
      #     name: Download Android Dependencies
      #     command: ./gradlew androidDependencies
      - run:
          name: Run Unit Tests
          command: ./gradlew test
      

  publish_package:
    macos:
      xcode: 13.3.1
    steps:
      - checkout
      - flutter/install_sdk_and_pub:
          flutter_version: 2.10.5
          app-dir: example
      - run:
          name: Install dart
          command: |
            brew tap dart-lang/dart
            brew install dart
      - run:
          name: setup pub login
          command: sh .circleci/pub_login.sh
      - run:
          name: publish pub
          command: dart pub publish -f

workflows:
  version: 2
  build_test:
    jobs:
      - flutter/lint:
          version: 2.10.5
          filters:
            branches:
              ignore:
                - /release-(.*)/
      # - build_test_iOS:
      #     requires:
      #       - flutter/lint
      #     filters:
      #       branches:
      #         ignore:
      #           - /release-(.*)/
      - build_test_Android:
          requires:
            - flutter/lint
          filters:
            branches:
              ignore:
                - /release-(.*)/
  publish_plugin:
    jobs:
      - flutter/lint:
          version: 2.10.5
          filters:
            branches:
              only:
                - /release-(.*)/
      - build_test_iOS:
          requires:
            - flutter/lint
          filters:
            branches:
              only:
                - /release-(.*)/
      - build_test_Android:
          requires:
            - flutter/lint
          filters:
            branches:
              only:
                - /release-(.*)/
      - hold_for_publish:
          type: approval
          requires:
            - build_test_iOS
            - build_test_Android
          filters:
            branches:
              only:
                - /release-(.*)/
      - publish_package:
          requires:
            - hold_for_publish
          filters:
            branches:
              only:
                - /release-(.*)/
